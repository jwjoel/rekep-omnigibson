```python
# The task involves 3 stages:
# 1. Grasp the white pen.
# 2. Reorient the white pen to be upright.
# 3. Drop the white pen upright into the black pen holder.

num_stages = 3

### stage 1 sub-goal constraints (grasp the white pen)
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the white pen's keypoint 2 (near the middle of the pen)."""
    return np.linalg.norm(end_effector - keypoints[2])

### stage 1 path constraints (none for grasping stage)
# No path constraints needed for this stage.

### stage 2 sub-goal constraints (reorient the white pen to be upright)
def stage2_subgoal_constraint1(end_effector, keypoints):
    """Ensure the white pen is upright by aligning the vector from keypoint 2 to keypoint 3 (pen body) with the z-axis."""
    pen_vector = keypoints[3] - keypoints[2]
    z_axis = np.array([0, 0, 1])
    return np.arccos(np.dot(pen_vector, z_axis) / (np.linalg.norm(pen_vector) * np.linalg.norm(z_axis)))

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the white pen at keypoint 2."""
    return get_grasping_cost_by_keypoint_idx(2)

### stage 3 sub-goal constraints (drop the white pen upright into the black pen holder)
def stage3_subgoal_constraint1(end_effector, keypoints):
    """Ensure the white pen is upright (parallel to the z-axis) by aligning the vector from keypoint 2 to keypoint 3 with the z-axis."""
    pen_vector = keypoints[3] - keypoints[2]
    z_axis = np.array([0, 0, 1])
    return np.arccos(np.dot(pen_vector, z_axis) / (np.linalg.norm(pen_vector) * np.linalg.norm(z_axis)))

def stage3_subgoal_constraint2(end_effector, keypoints):
    """Ensure the white pen is 10cm above the black pen holder's opening (keypoint 5)."""
    offsetted_point = keypoints[5] + np.array([0, 0, 0.1])  # 10cm above keypoint 5
    return np.linalg.norm(keypoints[2] - offsetted_point)

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the white pen at keypoint 2."""
    return get_grasping_cost_by_keypoint_idx(2)

"""
Summarize keypoints to be grasped in all grasping stages.
The length of the list should be equal to the number of stages.
For grasping stage, write the keypoint index. For non-grasping stage, write -1.
"""
grasp_keypoints = [2, -1, -1]

"""
Summarize at **the end of which stage** the robot should release the keypoints.
The keypoint indices must appear in an earlier stage as defined in `grasp_keypoints` (i.e., a keypoint can only be released only if it has been grasped previously).
Only release object when it's necessary to complete the task, e.g., drop bouquet in the vase.
The length of the list should be equal to the number of stages.
If a keypoint is to be released at the end of a stage, write the keypoint index at the corresponding location. Otherwise, write -1.
"""
release_keypoints = [-1, -1, 2]

```